hard reset in git:
git reset --hard <commit_id>

force push:
git push origin main --force

open mysql db in docker:
docker exec -it csc648-fa25-0104-team01-db-1 mysql -u csc648user -p
    - add winpty to the start if you are using linux terminal software on windows (such as gitbash)
    - password is Csc648_P@ss!

UPDATE users SET verification_status='verified' WHERE user_id=4;
UPDATE products SET approval_status='approved' WHERE product_id=17;

üß™ Test Wishlist Notifications Flow with curl

üîê 0. Prerequisite: Get your JWT Token

If you haven‚Äôt already:
curl -X POST http://localhost:8001/auth/login \
-H "Content-Type: application/json" \
-d '{"email": "your_email@example.com", "password": "your_password"}'

Copy the "access_token" from the response. You‚Äôll use it in all further commands.

üß© 1. Add a Product to Wishlist

curl -X POST http://localhost:8001/wishlist/add \
-H "Authorization: Bearer <your_token>" \
-H "Content-Type: application/json" \
-d '{"product_id": 1}'

Replace `1` with a valid product ID and `<your_token>` with your JWT.

üü° 2. Mark Product as Sold

You have two options:

üîß Option A: Use API Route (if you're the owner)

curl -X PUT http://localhost:8001/products/1/mark-sold \
-H "Authorization: Bearer <your_token>"

üõ† Option B: Manually update DB (if you're not the owner)

Open MySQL:

docker exec -it mysql mysql -u root -p gator_market

Then run:

UPDATE products SET status = 'sold' WHERE product_id = 1;
UPDATE wishlist_tracking SET notified = FALSE WHERE product_id = 1;

üîî 3. Fetch Notifications

curl -X GET http://localhost:8001/wishlist/notifications \
-H "Authorization: Bearer <your_token>"

Expected response:

[
  {
    "product_id": 1,
    "name": "MacBook Pro 13\"",
    "image_url": "/static/images/macbook.jpg"
  }
]

‚úÖ 4. Confirm It's Marked as Notified

Run the same curl command again:

curl -X GET http://localhost:8001/wishlist/notifications \
-H "Authorization: Bearer <your_token>"

Expected response:

[]

This means the backend successfully updated `notified = TRUE`.

## ‚úÖ Step-by-Step: Test Email Verification Backend (Local Backend on Port 8001)

### üß© Prerequisites

* Backend running on `localhost:8001`
* `.env` contains valid Ethereal SMTP credentials
* `users` table includes:

  * `verification_status`
  * `verification_token`
  * `verification_token_created_at`

---

### üîπ Step 1: Register a test user

If you allow non-`@sfsu.edu` emails:

```bash
curl -X POST http://localhost:8001/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "username": "norma87",
    "password": "Ilikepie!7",
    "email": "norma87@ethereal.email",
    "first_name": "Norma",
    "last_name": "Test"
  }'
```

‚úÖ Expected Response:

```json
{"message": "User registered successfully", ...}
```

---

### üîπ Step 2: Send verification email

```bash
curl -X POST http://localhost:8001/verify/send \
  -H "Content-Type: application/json" \
  -d '{"email": "norma87@ethereal.email"}'
```

‚úÖ Expected Response:

```json
{"message": "Verification email sent"}
```

---

### üîπ Step 3: Get the token from Ethereal inbox

* Go to [https://ethereal.email](https://ethereal.email)
* Log in with the Ethereal credentials
* Open the email sent to `norma87@ethereal.email`
* Copy the token from the link:

Example:

```
https://csc648g1.me/verify/confirm?token=your-token-here
```

---

### üîπ Step 4: Confirm the email using the token

```bash
curl -X GET "http://localhost:8001/verify/confirm?token=your-token-here"
```

‚úÖ Expected Response:

```json
{"message": "Email verified successfully"}
```

---

### üîπ Step 5: Optional - Check verification status in database

```sql
SELECT verification_status FROM users WHERE email = 'norma87@ethereal.email';
```

Should return `'verified'`

---

### üîÅ Bonus: Test expired token

1. In MySQL, simulate expiration:

```sql
UPDATE users SET verification_token_created_at = NOW() - INTERVAL 2 DAY WHERE email = 'norma87@ethereal.email';
```

2. Run the same `/verify/confirm` request:

```bash
curl -X GET "http://localhost:8001/verify/confirm?token=your-token-here"
```

‚úÖ Expected Response:

```json
{"error": "Token has expired"}
```